function generateHeaderCode(N, matlab_code)
%GENERATEHEADERCODE(N) outputs a header file for calculating a 3D-SWIG
%   trajectory of order N. If N is an array with more than one element,
%   the header file will contain multiple functions to calculate
%   trajectories of different orders.
%
%   Options:
%       - matlab_code: Output a MATLAB version of the code for validation.
%

if nargin < 2
    matlab_code = false;
end

if ~exist([pwd filesep 'headers'], 'dir')
    mkdir([pwd filesep 'headers']);
end

fprintf(fid, '/**\n');
fprintf(fid, '* \\brief Look-up tables for 3D-SWIG trajectories\n');
fprintf(fid, '* \n');
fprintf(fid, '* This code was auto-generated by the MATLAB function generateHeaderCode.m\n');
fprintf(fid, '* Calculation of dMPhi1 and dMPhi2 must be handled by the sequence code, e.g.:\n');
fprintf(fid, '* \n');
fprintf(fid, '*     > const double phi1 = 0.465571231876768\n');
fprintf(fid, '*     > const double phi2 = 0.682327803828019\n');
fprintf(fid, '*     > double u_dMPhi1 = fmod(lReorderIndex*phi1, 1.0);\n');
fprintf(fid, '*     > double u_dMPhi2 = fmod(lReorderIndex*phi2, 1.0);\n');
fprintf(fid, '* \n');
fprintf(fid, '* If this code is useful for your research, please consider citing:\n');
fprintf(fid, '* %s\n', fileread('reference.txt'));
fprintf(fid, '* \n');
fprintf(fid, '* 2023 – Alexander Fyrdahl, PhD (alexander.fyrdahl@ki.se)\n');
fprintf(fid, '*/\n');

for n = N
    fprintf(fid, '\nvoid fSWIGTraj%i(long u_lTrig, double dMPhi1, double dMPhi2, double* x, double* y, double *z)\n{\n',12*n^2);
    
    if matlab_code
        fidm = fopen(sprintf('header/fSWIGTraj%i.m', 12*n^2), 'w+');
        fprintf(fidm, '%%FSWIGTRAJ%i Look-up tables for 3D-SWIG trajectories\n', 12*n^2);
        fprintf(fidm, '%% If this code is useful for your research, please consider citing:\n');
        fprintf(fidm, '%% %s\n', fileread('reference.txt'));
        fprintf(fidm, '%%\n');
        fprintf(fidm, '%% 2023 – Alexander Fyrdahl, PhD (alexander.fyrdahl@ki.se)\n');
        fprintf(fidm, '%%\n\n');
        fprintf(fidm, 'function [x, y, z] = fSWIGTraj%i(u_lTrig, dMPhi1, dMPhi2)\n', 12*n^2);
    end
    
    [grid, idx] = utils.createCubeGrid(n);
    
    grid(grid > 0) = 1;
    grid(        1:n,   n+1:end-n) = 2;
    grid(  n+1:end-n,         1:n) = 3;
    grid(  n+1:end-n, end-n+1:end) = 4;
    grid(end-n+1:end,   n+1:end-n) = 5;
    
    fprintf(fid, '    switch(u_lTrig%%%i) {\n', 12*n^2);
    if matlab_code; fprintf(fidm, '    switch mod(u_lTrig, %i)\n', 12*n^2); end
    for beat = 0:12*n^2-1
        fprintf(fid, '    case(%i):\n', beat);
        if matlab_code; fprintf(fidm, '        case %i\n', beat); end
        [row_index, col_index] = ind2sub(size(grid), idx(beat+1));
        if grid(row_index, col_index) == 1 % Top face
            fprintf(fid, '        *x = (-dMPhi1%s)/%i;\n', pps(row_index - 2*n), n);
            fprintf(fid, '        *y = (dMPhi2%s)/%i;\n', pps(col_index - 2*n - 1), n);
            fprintf(fid, '        *z = 1;\n');
            if matlab_code
                fprintf(fidm, '            x = (-dMPhi1%s)/%i;\n', pps(row_index - 2*n), n);
                fprintf(fidm, '            y = (dMPhi2%s)/%i;\n', pps(col_index - 2*n - 1), n);
                fprintf(fidm, '            z = 1;\n');
            end
        else % Sides
            if grid(row_index, col_index) == 2
                fprintf(fid, '        *x = -1;\n');
                fprintf(fid, '        *y = (dMPhi1%s)/%i;\n', pps(col_index - 2*n - 1), n);
                fprintf(fid, '        *z = (dMPhi2%s)/%i;\n', pps(row_index - 1), n);
                if matlab_code
                    fprintf(fidm, '            x = -1;\n');
                    fprintf(fidm, '            y = (dMPhi1%s)/%i;\n', pps(col_index - 2*n - 1), n);
                    fprintf(fidm, '            z = (dMPhi2%s)/%i;\n', pps(row_index - 1), n);
                end
            elseif grid(row_index, col_index) == 3
                fprintf(fid, '        *x = (-dMPhi1%s)/%i;\n', pps(row_index - 2*n), n);
                fprintf(fid, '        *y = -1;\n');
                fprintf(fid, '        *z = (dMPhi2%s)/%i;\n', pps(col_index - 1), n);
                if matlab_code
                    fprintf(fidm, '            x = (-dMPhi1%s)/%i;\n', pps(row_index - 2*n), n);
                    fprintf(fidm, '            y = -1;\n');
                    fprintf(fidm, '            z = (dMPhi2%s)/%i;\n', pps(col_index - 1), n);
                end
            elseif grid(row_index, col_index) == 4
                fprintf(fid, '        *x = (-dMPhi1%s)/%i;\n', pps(row_index - 2*n), n);
                fprintf(fid, '        *y = 1;\n');
                fprintf(fid, '        *z = (dMPhi2%s)/%i;\n', pps(4*n - col_index), n);
                if matlab_code
                    fprintf(fidm, '            x = (-dMPhi1%s)/%i;\n', pps(row_index - 2*n), n);
                    fprintf(fidm, '            y = 1;\n');
                    fprintf(fidm, '            z = (dMPhi2%s)/%i;\n', pps(4*n - col_index), n);
                end
            elseif grid(row_index, col_index) == 5
                fprintf(fid, '        *x = 1;\n');
                fprintf(fid, '        *y = (dMPhi1%s)/%i;\n', pps(col_index - 2*n - 1), n);
                fprintf(fid, '        *z = (dMPhi2%s)/%i;\n', pps(4*n - row_index), n);
                if matlab_code
                    fprintf(fidm, '            x = 1;\n');
                    fprintf(fidm, '            y = (dMPhi1%s)/%i;\n', pps(col_index - 2*n - 1), n);
                    fprintf(fidm, '            z = (dMPhi2%s)/%i;\n', pps(4*n - row_index), n);
                end
            end
        end
        fprintf(fid, '        break;\n');
        
    end
    fprintf(fid, '    default:\n');
    fprintf(fid, '        *x = 0.0;\n');
    fprintf(fid, '        *y = 0.0;\n');
    fprintf(fid, '        *z = 0.0;\n');
    fprintf(fid, '        break;\n');
    fprintf(fid,'    }\n');
    fprintf(fid,'}\n');
    
    if matlab_code
        fprintf(fidm, '        otherwise\n');
        fprintf(fidm, '            x = 0;\n');
        fprintf(fidm, '            y = 0;\n');
        fprintf(fidm, '            z = 0;\n');
        fprintf(fidm, '    end\nend\n');
        fclose(fidm);
    end
end
fclose(fid);
end

function str = pps(x)
% Print Pretty Strings
if x == 0
    str = '';
else
    str = sprintf('%+i',x);
end
end




